---
description: APPLY fundamental Clean Code principles TO ensure code quality and maintainability
globs:
alwaysApply: true
---

# Clean Code Core Principles

## Context
- These are the foundational principles for clean code
- They guide all code writing and review decisions
- Detailed guidelines are provided in specialized rules

## Requirements

### General Rules
1. Follow standard conventions
2. Keep it simple stupid (KISS)
3. Boy scout rule: Leave code cleaner than found
4. Always find root cause

### Design Rules
1. Keep configurable data at high levels
2. Prefer polymorphism to if/else or switch/case
3. Separate multi-threading code
4. Prevent over-configurability
5. Use dependency injection
6. Follow Law of Demeter

## Specialized Rules

### Core Principles
- [YAGNI](mdc:.cursor/rules/0057-clean-code-yagni.mdc)
- [DRY](mdc:.cursor/rules/0058-clean-code-dry.mdc)
- [SOLID](mdc:.cursor/rules/0059-clean-code-solid.mdc)

### Testing and Quality
- [Testing Standards](mdc:.cursor/rules/00510-clean-code-tests.mdc)
- [Code Smells](mdc:.cursor/rules/00511-clean-code-smells.mdc)

### Code Organization
- [Understanding](mdc:.cursor/rules/0051-clean-code-understanding.mdc)
- [Naming](mdc:.cursor/rules/0052-clean-code-naming.mdc)
- [Functions](mdc:.cursor/rules/0053-clean-code-functions.mdc)
- [Comments](mdc:.cursor/rules/0054-clean-code-comments.mdc)
- [Structure](mdc:.cursor/rules/0055-clean-code-structure.mdc)
- [Objects](mdc:.cursor/rules/0056-clean-code-objects.mdc)

## Examples
<example>
// Good: Following core principles
class EmailService {
  constructor(private readonly emailProvider: IEmailProvider) {}
  
  async sendEmail(email: Email): Promise<void> {
    await this.emailProvider.send(email);
  }
}
</example>

<example type="invalid">
// Bad: Violating multiple principles
class UserManager {
  // Violates SRP, DRY, and YAGNI
  private logger = new ConsoleLogger();
  private mailer = new SmtpMailer();
  private unusedFeature: any; // YAGNI violation

  async processUser(user: any) { // Type safety ignored
    // Complex, duplicated logic
  }
}
</example>

## Critical Rules
- ALWAYS follow standard conventions
- ALWAYS keep it simple (KISS)
- ALWAYS leave code cleaner than found
- NEVER ignore root causes
- ALWAYS refer to specialized rules for detailed guidance
